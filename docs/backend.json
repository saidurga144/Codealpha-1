{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user account in the Packet Detective application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "The username chosen by the user."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time the user registered.",
          "format": "date-time"
        },
        "lastLogin": {
          "type": "string",
          "description": "The date and time the user last logged in.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "registrationDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Accessible only by the user themselves (based on their userId).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user.  Matches the Firebase Auth UID."
            }
          ]
        }
      }
    ],
    "reasoning": "This design prioritizes security and scalability for the Packet Detective application. User data is stored in a dedicated collection using path-based ownership (`/users/{userId}`), ensuring data privacy. Since authentication is handled with Firebase Auth, the `users` collection primarily stores user profile information. This approach facilitates simple security rules based on `request.auth.uid`. To enhance list security, no list operations are provided for users collection; it only allows get operations for a specific user. The structure supports the application's MVP requirements, focusing on packet capture, analysis, and display."
  }
}